name: Terraform Deployment to AWS

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy'
        required: true
        type: choice
        options:
          - staging
          - production

      destroy:
        description: 'Set true to destroy the environment'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform Apply or Destroy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.11.4

      - name: Install Make (optional if you're not using it in this job)
        run: sudo apt-get update && sudo apt-get install -y make

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.TRUST_ROLE_GITHUB }}
          aws-region: us-east-1
          role-session-name: GitHubActions-${{ github.run_id }}
          role-duration-seconds: 3600

      - name: Select or create Terraform workspace
        run: |
          terraform workspace select ${{ github.event.inputs.environment }} || terraform workspace new ${{ github.event.inputs.environment }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply or Destroy
        run: |
          if [[ "${{ github.event.inputs.destroy }}" == "true" ]]; then
            terraform destroy -auto-approve -var-file="${{ github.event.inputs.environment }}.tfvars"
          else
            terraform apply -auto-approve -var-file="${{ github.event.inputs.environment }}.tfvars"
          fi
        env:
          TF_VAR_db_password: ${{ github.event.inputs.environment == 'staging' && secrets.STAG_DB_PASS || secrets.PROD_DB_PASS }}
